{"version":3,"sources":["node_modules/nodebb-plugin-composer-default/static/lib/composer/categoryList.js"],"names":["define","categorySelector","taskbar","api","categoryList","selector","init","postContainer","postData","listContainer","find","length","on","toggleDropDirection","updateTaskbar","privilege","states","onSelect","selectedCategory","hasOwnProperty","changeCategory","cid","ajaxify","data","template","category","parseInt","name","compose","translateText","modal","openOnLoad","showLinks","text","selectCategory","toggleClass","outerHeight","$","window","height","getSelectedCid","getSelectedCategory","uuid","attr","get","then","icon","update","image","backgroundImage","background-color","bgColor","slice","async","categoryData","fetch","config","relative_path","r","json","require","scheduler","tags","onChangeCategory"],"mappings":"AACA,aAIAA,OAAO,yBACN,mBAAoB,UAAW,OAC7B,SAAUC,EAAkBC,EAASC,GACvC,IAAIC,KAEJ,IAAIC,EAEJD,EAAaE,KAAO,SAAUC,EAAeC,GAC5C,IAAIC,EAAgBF,EAAcG,KAAK,4BACvC,IAAKD,EAAcE,OAAQ,CAC1B,OAGDJ,EAAcK,GAAG,yBAA0B,WAC1CC,EAAoBN,KAGrBH,EAAaU,cAAcP,EAAeC,GAE1CH,EAAWJ,EAAiBK,KAAKG,EAAcC,KAAK,oCACnDK,UAAW,gBACXC,QAAS,WAAY,cAAe,YACpCC,SAAU,SAAUC,GACnB,GAAIV,EAASW,eAAe,OAAQ,CACnCC,EAAeb,EAAeC,EAAUU,OAI3C,IAAKb,EAAU,CACd,OAED,GAAIG,EAASa,KAAOC,QAAQC,KAAKC,SAASC,UAAYC,SAASlB,EAASa,IAAK,MAAQK,SAASJ,QAAQC,KAAKF,IAAK,IAAK,CACpHhB,EAASa,kBAAqBG,IAAKb,EAASa,IAAKM,KAAML,QAAQC,KAAKI,WAC9D,GAAIL,QAAQC,KAAKC,SAASI,SAAWN,QAAQC,KAAKL,iBAAkB,CAE1Eb,EAASa,kBAAqBG,IAAKC,QAAQC,KAAKF,IAAKM,KAAML,QAAQC,KAAKL,kBAIzEX,EAAcG,KAAK,kBACjBmB,cAAcxB,EAASa,iBAAmBb,EAASa,iBAAiBS,KAAO,wCAC3Ef,GAAG,QAAS,WACZX,EAAiB6B,OAChBf,UAAW,gBACXC,QAAS,WAAY,cAAe,YACpCe,WAAY,KACZC,UAAW,MACXf,SAAU,SAAUC,GACnBX,EAAcG,KAAK,kBAAkBuB,KAAKf,EAAiBS,MAC3DtB,EAAS6B,eAAehB,EAAiBG,KACzC,GAAIb,EAASW,eAAe,OAAQ,CACnCC,EAAeb,EAAeC,EAAUU,SAM7CL,EAAoBN,IAGrB,SAASM,EAAoBN,GAC5BA,EAAcG,KAAK,4DAA4DyB,YAAY,SAAU5B,EAAc6B,cAAgBC,EAAEC,QAAQC,SAAW,GAGzJnC,EAAaoC,eAAiB,WAC7B,IAAItB,EACJ,GAAIb,EAAU,CACba,EAAmBb,EAASoC,sBAE7B,OAAOvB,EAAmBA,EAAiBG,IAAM,GAGlDjB,EAAaU,cAAgB,SAAUP,EAAeC,GACrD,GAAIkB,SAASlB,EAASa,IAAK,IAAK,CAC/B,IAAIqB,EAAOnC,EAAcoC,KAAK,aAC9BxC,EAAIyC,mBAAmBpC,EAASa,UAAWwB,KAAK,SAAUpB,GACzD,GAAIA,GAAYA,EAASqB,KAAM,CAC9B5C,EAAQ6C,OAAO,WAAYL,GAC1BM,MAAOvB,EAASwB,gBAChBC,mBAAoBzB,EAAS0B,QAC7BL,KAAMrB,EAASqB,KAAKM,MAAM,UAO/BC,eAAejC,EAAeb,EAAeC,EAAUU,GACtDV,EAASa,IAAMH,EAAiBG,IAChC,MAAMiC,QAAqBhB,OAAOiB,SAASC,OAAOC,8BAA8BvC,EAAiBG,OAAOwB,KAAKa,GAAKA,EAAEC,QAEpHC,SAAS,qBAAsB,iBAAkB,SAAUC,EAAWC,GACrED,EAAUE,iBAAiBT,GAC3BQ,EAAKC,iBAAiBxD,EAAeC,EAAUU,EAAiBG,IAAKiC,KAGtElD,EAAaU,cAAcP,EAAeC,GAG3C,OAAOJ","file":"node_modules/nodebb-plugin-composer-default/static/lib/composer/categoryList.js","sourcesContent":["\n'use strict';\n\n/* globals define, $, window, ajaxify, config */\n\ndefine('composer/categoryList', [\n\t'categorySelector', 'taskbar', 'api',\n], function (categorySelector, taskbar, api) {\n\tvar categoryList = {};\n\n\tvar selector;\n\n\tcategoryList.init = function (postContainer, postData) {\n\t\tvar listContainer = postContainer.find('.category-list-container');\n\t\tif (!listContainer.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tpostContainer.on('action:composer.resize', function () {\n\t\t\ttoggleDropDirection(postContainer);\n\t\t});\n\n\t\tcategoryList.updateTaskbar(postContainer, postData);\n\n\t\tselector = categorySelector.init(listContainer.find('[component=\"category-selector\"]'), {\n\t\t\tprivilege: 'topics:create',\n\t\t\tstates: ['watching', 'notwatching', 'ignoring'],\n\t\t\tonSelect: function (selectedCategory) {\n\t\t\t\tif (postData.hasOwnProperty('cid')) {\n\t\t\t\t\tchangeCategory(postContainer, postData, selectedCategory);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tif (!selector) {\n\t\t\treturn;\n\t\t}\n\t\tif (postData.cid && ajaxify.data.template.category && parseInt(postData.cid, 10) === parseInt(ajaxify.data.cid, 10)) {\n\t\t\tselector.selectedCategory = { cid: postData.cid, name: ajaxify.data.name };\n\t\t} else if (ajaxify.data.template.compose && ajaxify.data.selectedCategory) {\n\t\t\t// separate composer route\n\t\t\tselector.selectedCategory = { cid: ajaxify.data.cid, name: ajaxify.data.selectedCategory };\n\t\t}\n\n\t\t// this is the mobile category selector\n\t\tpostContainer.find('.category-name')\n\t\t\t.translateText(selector.selectedCategory ? selector.selectedCategory.name : '[[modules:composer.select_category]]')\n\t\t\t.on('click', function () {\n\t\t\t\tcategorySelector.modal({\n\t\t\t\t\tprivilege: 'topics:create',\n\t\t\t\t\tstates: ['watching', 'notwatching', 'ignoring'],\n\t\t\t\t\topenOnLoad: true,\n\t\t\t\t\tshowLinks: false,\n\t\t\t\t\tonSelect: function (selectedCategory) {\n\t\t\t\t\t\tpostContainer.find('.category-name').text(selectedCategory.name);\n\t\t\t\t\t\tselector.selectCategory(selectedCategory.cid);\n\t\t\t\t\t\tif (postData.hasOwnProperty('cid')) {\n\t\t\t\t\t\t\tchangeCategory(postContainer, postData, selectedCategory);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\ttoggleDropDirection(postContainer);\n\t};\n\n\tfunction toggleDropDirection(postContainer) {\n\t\tpostContainer.find('.category-list-container [component=\"category-selector\"]').toggleClass('dropup', postContainer.outerHeight() < $(window).height() / 2);\n\t}\n\n\tcategoryList.getSelectedCid = function () {\n\t\tvar selectedCategory;\n\t\tif (selector) {\n\t\t\tselectedCategory = selector.getSelectedCategory();\n\t\t}\n\t\treturn selectedCategory ? selectedCategory.cid : 0;\n\t};\n\n\tcategoryList.updateTaskbar = function (postContainer, postData) {\n\t\tif (parseInt(postData.cid, 10)) {\n\t\t\tvar uuid = postContainer.attr('data-uuid');\n\t\t\tapi.get(`/categories/${postData.cid}`, {}).then(function (category) {\n\t\t\t\tif (category && category.icon) {\n\t\t\t\t\ttaskbar.update('composer', uuid, {\n\t\t\t\t\t\timage: category.backgroundImage,\n\t\t\t\t\t\t'background-color': category.bgColor,\n\t\t\t\t\t\ticon: category.icon.slice(3),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tasync function changeCategory(postContainer, postData, selectedCategory) {\n\t\tpostData.cid = selectedCategory.cid;\n\t\tconst categoryData = await window.fetch(`${config.relative_path}/api/category/${selectedCategory.cid}`).then(r => r.json());\n\n\t\trequire(['composer/scheduler', 'composer/tags'], function (scheduler, tags) {\n\t\t\tscheduler.onChangeCategory(categoryData);\n\t\t\ttags.onChangeCategory(postContainer, postData, selectedCategory.cid, categoryData);\n\t\t});\n\n\t\tcategoryList.updateTaskbar(postContainer, postData);\n\t}\n\n\treturn categoryList;\n});\n"]}