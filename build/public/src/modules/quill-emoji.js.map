{"version":3,"sources":["node_modules/nodebb-plugin-composer-quill/static/lib/emoji.js"],"names":["define","quill","Emoji","table","imageBlot","import","emojiAttributes","EmojiBlot","[object Object]","value","node","super","create","src","setAttribute","class","domNode","reduce","formats","attribute","hasAttribute","getAttribute","name","includes","this","removeAttribute","format","blotName","register","enable","Object","keys","length","socket","emit","err","app","alertError","message","on","convert","bind","delta","contents","getContents","emojiRegex","ops","some","command","insert","String","endsWith","retain","cur","match","exec","emojiObj","emoji","url","config","relative_path","pack","image","cacheBuster","attributes","alt","character","unshift","delete","index","updateContents","lastIndex"],"mappings":"AAAA,aAmBAA,OAAO,eAAgB,SAAWC,IACjC,MAAMC,GACLC,UAID,MAAMC,EAAYH,EAAMI,OAAO,iBAC/B,MAAMC,GAAmB,MAAO,eAE1BC,UAAkBH,EACvBI,cAAcC,GACb,MAAMC,EAAOC,MAAMC,OAAOH,EAAMI,KAChCH,EAAKI,aAAa,QAASL,EAAMM,OACjC,OAAOL,EAGRF,eAAeQ,GACd,OAAOV,EAAgBW,OAAO,CAACC,EAASC,KACvC,GAAIH,EAAQI,aAAaD,GAAY,CACpCD,EAAQC,GAAaH,EAAQK,aAAaF,GAE3C,OAAOD,OAITV,cAAcc,EAAMb,GACnB,GAAIH,EAAgBiB,SAASD,GAAO,CACnC,GAAIb,EAAO,CACVe,KAAKR,QAAQF,aAAaQ,EAAMb,OAC1B,CACNe,KAAKR,QAAQS,gBAAgBH,QAExB,CACNX,MAAMe,OAAOJ,EAAMb,KAItBF,EAAUoB,SAAW,QACrB1B,EAAM2B,SAASrB,GAEfL,EAAM2B,OAAS,SAAU5B,GACxB,IAAK6B,OAAOC,KAAK7B,EAAMC,OAAO6B,OAAQ,CACrCC,OAAOC,KAAK,0CAA4C,CAACC,EAAKhC,KAC7D,GAAIgC,EAAK,CACRC,IAAIC,WAAWF,EAAIG,SAGpB,GAAInC,IAAU,KAAM,CACnBD,EAAMC,MAAQA,EACdF,EAAMsC,GAAG,cAAerC,EAAMsC,QAAQC,KAAKxC,SAM/CC,EAAMsC,QAAU,SAAUE,GACzB,MAAMzC,EAAQuB,KACd,MAAMmB,EAAW1C,EAAM2C,cACvB,MAAMC,EAAa,eAGnB,IAAKH,GAASA,EAAMI,IAAIC,KAAKC,GAAWA,EAAQC,SAAWD,EAAQC,SAAW,KAAOC,OAAOF,EAAQC,QAAQE,SAAS,MAAQD,OAAOF,EAAQC,QAAQE,SAAS,UAAW,CAEvKR,EAAS1B,OAAO,CAACmC,EAAQC,KACxB,IAAIC,EAAQT,EAAWU,KAAKF,EAAIJ,QAChC,IAAIN,EACJ,IAAIa,EACJ,MAAOF,IAAU,KAAM,CACtBE,EAAWtD,EAAMC,MAAMmD,EAAM,IAC7B,GAAIE,EAAU,CACbb,IACCM,QACCQ,OACCC,OAAQC,OAAOC,mDAAmDJ,EAASK,QAAQL,EAASM,SAAS1B,IAAI2B,cACzGhD,oCAAqCyC,EAASK,eAAeL,EAASlC,SAGxE0C,YACCC,IAAKT,EAASU,aAGhB,GAAIZ,EAAM,GAAGtB,OAAQ,CACpBW,EAASwB,SAAUC,OAAQd,EAAM,GAAGtB,SAErC,GAAIoB,EAASE,EAAMe,MAAO,CACzB1B,EAASwB,SAAUf,OAAQA,EAASE,EAAMe,QAG3CpE,EAAMqE,gBACLxB,IAAKH,IAKPE,EAAW0B,UAAYnB,EAASE,EAAMe,MAAQ,EAC9Cf,EAAQT,EAAWU,KAAKF,EAAIJ,QAG7BG,GAAUC,EAAIJ,OAAOjB,QAAU,EAC/B,OAAOoB,GACL,KAIL,OAAOlD","file":"node_modules/nodebb-plugin-composer-quill/static/lib/emoji.js","sourcesContent":["'use strict';\n\n/* globals define, socket, app, config */\n\n/**\n * DEVELOPER NOTE\n *\n * It isn't particularly scalable to have a separate file for integration with\n * each individual plugin. Eventually, it is expected that Quill will fire off\n * hooks that plugins can listen for and invoke, therefore the code contained\n * here would be better located in the emoji plugin instead.\n *\n * .enable() is called from quill-nbb.js but it could very well be listening\n * for action:quill.load\n *\n * .convert() is called during composer autocomplete, which could be listening\n * for a hook to be fired by autocomplete, of which there is none right now.\n */\n\ndefine('quill-emoji', ['quill'], (quill) => {\n\tconst Emoji = {\n\t\ttable: {},\n\t};\n\n\t// Emoji Blot\n\tconst imageBlot = quill.import('formats/image');\n\tconst emojiAttributes = ['alt', 'class'];\n\n\tclass EmojiBlot extends imageBlot {\n\t\tstatic create(value) {\n\t\t\tconst node = super.create(value.src);\n\t\t\tnode.setAttribute('class', value.class);\n\t\t\treturn node;\n\t\t}\n\n\t\tstatic formats(domNode) {\n\t\t\treturn emojiAttributes.reduce((formats, attribute) => {\n\t\t\t\tif (domNode.hasAttribute(attribute)) {\n\t\t\t\t\tformats[attribute] = domNode.getAttribute(attribute);\n\t\t\t\t}\n\t\t\t\treturn formats;\n\t\t\t}, {});\n\t\t}\n\n\t\tstatic format(name, value) {\n\t\t\tif (emojiAttributes.includes(name)) {\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.domNode.setAttribute(name, value);\n\t\t\t\t} else {\n\t\t\t\t\tthis.domNode.removeAttribute(name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsuper.format(name, value);\n\t\t\t}\n\t\t}\n\t}\n\tEmojiBlot.blotName = 'emoji';\n\tquill.register(EmojiBlot);\n\n\tEmoji.enable = function (quill) {\n\t\tif (!Object.keys(Emoji.table).length) {\n\t\t\tsocket.emit('plugins.composer-quill.getEmojiTable', {}, (err, table) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tapp.alertError(err.message);\n\t\t\t\t}\n\n\t\t\t\tif (table !== null) {\n\t\t\t\t\tEmoji.table = table;\n\t\t\t\t\tquill.on('text-change', Emoji.convert.bind(quill));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tEmoji.convert = function (delta) {\n\t\tconst quill = this;\n\t\tconst contents = quill.getContents();\n\t\tconst emojiRegex = /:([\\w+-]+):/g;\n\n\t\t// Special handling for emoji plugin\n\t\tif (!delta || delta.ops.some(command => command.insert && (command.insert === ':' || String(command.insert).endsWith(':') || String(command.insert).endsWith(': \\n')))) {\n\t\t\t// Check all nodes for emoji shorthand and replace with image\n\t\t\tcontents.reduce((retain, cur) => {\n\t\t\t\tlet match = emojiRegex.exec(cur.insert);\n\t\t\t\tlet contents;\n\t\t\t\tlet emojiObj;\n\t\t\t\twhile (match !== null) {\n\t\t\t\t\temojiObj = Emoji.table[match[1]];\n\t\t\t\t\tif (emojiObj) {\n\t\t\t\t\t\tcontents = [{\n\t\t\t\t\t\t\tinsert: {\n\t\t\t\t\t\t\t\temoji: {\n\t\t\t\t\t\t\t\t\turl: `${config.relative_path}/plugins/nodebb-plugin-emoji/emoji/${emojiObj.pack}/${emojiObj.image}?${app.cacheBuster}`,\n\t\t\t\t\t\t\t\t\tclass: `not-responsive emoji emoji-${emojiObj.pack} emoji--${emojiObj.name}`,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\talt: emojiObj.character,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}];\n\t\t\t\t\t\tif (match[0].length) {\n\t\t\t\t\t\t\tcontents.unshift({ delete: match[0].length });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (retain + match.index) {\n\t\t\t\t\t\t\tcontents.unshift({ retain: retain + match.index });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tquill.updateContents({\n\t\t\t\t\t\t\tops: contents,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reset search and continue\n\t\t\t\t\temojiRegex.lastIndex = retain + match.index + 1;\n\t\t\t\t\tmatch = emojiRegex.exec(cur.insert);\n\t\t\t\t}\n\n\t\t\t\tretain += cur.insert.length || 1;\n\t\t\t\treturn retain;\n\t\t\t}, 0);\n\t\t}\n\t};\n\n\treturn Emoji;\n});\n"]}