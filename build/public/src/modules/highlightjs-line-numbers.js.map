{"version":3,"sources":["node_modules/nodebb-plugin-markdown/public/js/highlightjs-line-numbers.js"],"names":["define","w","window","d","document","TABLE_NAME","LINE_NAME","CODE_BLOCK_NAME","NUMBERS_BLOCK_NAME","NUMBER_LINE_NAME","DATA_ATTR_NAME","BREAK_LINE_REGEXP","hljs","initLineNumbersOnLoad","lineNumbersBlock","addStyles","console","error","css","createElement","type","innerHTML","format","getElementsByTagName","appendChild","options","readyState","documentReady","addEventListener","blocks","querySelectorAll","i","hasOwnProperty","e","element","singleLine","firstLineIndex","async","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","html","l","nodes","childNodes","node","child","getLinesCount","textContent","duplicateMultilineNode","parentNode","className","test","result","text","split","match","func","setTimeout","args","replace","m","n"],"mappings":"AASAA,OAAO,4BAA6B,aAAc,WACjD,IAAIC,EAAIC,OACR,IAAIC,EAAIC,SAEL,IAAIC,EAAa,UACbC,EAAY,eACZC,EAAkB,eAClBC,EAAqB,kBACrBC,EAAmB,YACnBC,EAAiB,mBACjBC,EAAoB,cAExB,GAAIV,EAAEW,KAAM,CACRX,EAAEW,KAAKC,sBAAwBA,EAC/BZ,EAAEW,KAAKE,iBAAmBA,EAE1BC,QACG,CACHd,EAAEe,QAAQC,MAAM,8BAGpB,SAASF,IACL,IAAIG,EAAMf,EAAEgB,cAAc,SAC1BD,EAAIE,KAAO,WACXF,EAAIG,UAAYC,EACZ,0GAMAjB,EACAI,EACAC,IAEJP,EAAEoB,qBAAqB,QAAQ,GAAGC,YAAYN,GAGlD,SAASL,EAAuBY,GAC5B,GAAItB,EAAEuB,aAAe,WAAY,CAC7BC,EAAcF,OACX,CACHxB,EAAE2B,iBAAiB,mBAAoB,WACnCD,EAAcF,MAK1B,SAASE,EAAeF,GACpB,IACI,IAAII,EAAS1B,EAAE2B,iBAAiB,aAEhC,IAAK,IAAIC,KAAKF,EAAQ,CAClB,GAAIA,EAAOG,eAAeD,GAAI,CAC1BjB,EAAiBe,EAAOE,GAAIN,KAGtC,MAAOQ,GACLhC,EAAEe,QAAQC,MAAM,sBAAuBgB,IAI/C,SAASnB,EAAkBoB,EAAST,GAChC,UAAWS,IAAY,SAAU,OAGjCT,EAAUA,IACNU,WAAY,OAIhB,IAAIC,IAAmBX,EAAQU,WAAa,EAAI,EAEhDE,EAAM,WAEFC,EAAwBJ,GAExBA,EAAQb,UAAYkB,EAAuBL,EAAQb,UAAWe,KAItE,SAASG,EAAwBC,EAAWJ,GAExC,IAAIK,EAAQC,EAASF,GAGrB,GAAIC,EAAMA,EAAME,OAAO,GAAGC,SAAW,GAAI,CACrCH,EAAMI,MAGV,GAAIJ,EAAME,OAASP,EAAgB,CAC/B,IAAIU,EAAO,GAEX,IAAK,IAAIf,EAAI,EAAGgB,EAAIN,EAAME,OAAQZ,EAAIgB,EAAGhB,IAAK,CAC1Ce,GAAQxB,EACJ,kSAgBAd,EACAF,EACAG,EACAC,EACAH,EACAwB,EAAI,EACJU,EAAMV,GAAGY,OAAS,EAAIF,EAAMV,GAAK,MAIzC,OAAOT,EAAO,kCAAoCjB,EAAYyC,IAGlE,OAAON,EAQX,SAASF,EAAyBJ,GAC9B,IAAIc,EAAQd,EAAQe,WACpB,IAAK,IAAIC,KAAQF,EAAO,CACpB,GAAIA,EAAMhB,eAAekB,GAAO,CAC5B,IAAIC,EAAQH,EAAME,GAClB,GAAIE,EAAcD,EAAME,aAAe,EAAG,CACtC,GAAIF,EAAMF,WAAWN,OAAS,EAAG,CAC7BL,EAAwBa,OACrB,CACHG,EAAuBH,EAAMI,gBAWjD,SAASD,EAAwBpB,GAC7B,IAAIsB,EAAYtB,EAAQsB,UAExB,IAAO,QAAQC,KAAKD,GAAY,OAEhC,IAAIf,EAAQC,EAASR,EAAQb,WAE7B,IAAK,IAAIU,EAAI,EAAG2B,EAAS,GAAI3B,EAAIU,EAAME,OAAQZ,IAAK,CAChD2B,GAAUpC,EAAO,kCAAoCkC,EAAWf,EAAMV,KAG1EG,EAAQb,UAAYqC,EAAOd,OAG/B,SAASF,EAAUiB,GACf,GAAIA,EAAKhB,SAAW,EAAG,SACvB,OAAOgB,EAAKC,MAAMjD,GAGtB,SAASyC,EAAeO,GACpB,OAAQA,EAAKf,OAAOiB,MAAMlD,QAA0BgC,OAGxD,SAASN,EAAOyB,GACZ7D,EAAE8D,WAAWD,EAAM,GAQvB,SAASxC,EAAQA,EAAQ0C,GACrB,OAAO1C,EAAO2C,QAAQ,aAAc,SAASC,EAAGC,GAC5C,OAAOH,EAAKG,GAAKH,EAAKG,GAAKD","file":"node_modules/nodebb-plugin-markdown/public/js/highlightjs-line-numbers.js","sourcesContent":["/**\r\n * STOP! This file was edited from the version found in the repo\r\n * https://github.com/wcoder/highlightjs-line-numbers.js\r\n * \r\n * Changes:\r\n *   - Made into a requirejs module\r\n *   - Instead of passing window, document in as w and d, they\r\n *     are defined at top of module\r\n */\r\ndefine('highlightjs-line-numbers', ['highlight'], function () {\r\n\tvar w = window;\r\n\tvar d = document;\r\n\r\n    var TABLE_NAME = 'hljs-ln',\r\n        LINE_NAME = 'hljs-ln-line',\r\n        CODE_BLOCK_NAME = 'hljs-ln-code',\r\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\r\n        NUMBER_LINE_NAME = 'hljs-ln-n',\r\n        DATA_ATTR_NAME = 'data-line-number',\r\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\r\n\r\n    if (w.hljs) {\r\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\r\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\r\n\r\n        addStyles();\r\n    } else {\r\n        w.console.error('highlight.js not detected!');\r\n    }\r\n\r\n    function addStyles () {\r\n        var css = d.createElement('style');\r\n        css.type = 'text/css';\r\n        css.innerHTML = format(\r\n            '.{0}{border-collapse:collapse}\\\r\n            .{0} td{padding:0}\\\r\n            .{1}:before{content:attr({2})}',\r\n        [\r\n            TABLE_NAME,\r\n            NUMBER_LINE_NAME,\r\n            DATA_ATTR_NAME\r\n        ]);\r\n        d.getElementsByTagName('head')[0].appendChild(css);\r\n    }\r\n\r\n    function initLineNumbersOnLoad (options) {\r\n        if (d.readyState === 'complete') {\r\n            documentReady(options);\r\n        } else {\r\n            w.addEventListener('DOMContentLoaded', function () {\r\n                documentReady(options);\r\n            });\r\n        }\r\n    }\r\n\r\n    function documentReady (options) {\r\n        try {\r\n            var blocks = d.querySelectorAll('code.hljs');\r\n\r\n            for (var i in blocks) {\r\n                if (blocks.hasOwnProperty(i)) {\r\n                    lineNumbersBlock(blocks[i], options);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            w.console.error('LineNumbers error: ', e);\r\n        }\r\n    }\r\n\r\n    function lineNumbersBlock (element, options) {\r\n        if (typeof element !== 'object') return;\r\n\r\n        // define options or set default\r\n        options = options || {\r\n            singleLine: false\r\n        };\r\n\r\n        // convert options\r\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\r\n\r\n        async(function () {\r\n\r\n            duplicateMultilineNodes(element);\r\n\r\n            element.innerHTML = addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\r\n        });\r\n    }\r\n\r\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\r\n\r\n        var lines = getLines(inputHtml);\r\n\r\n        // if last line contains only carriage return remove it\r\n        if (lines[lines.length-1].trim() === '') {\r\n            lines.pop();\r\n        }\r\n\r\n        if (lines.length > firstLineIndex) {\r\n            var html = '';\r\n\r\n            for (var i = 0, l = lines.length; i < l; i++) {\r\n                html += format(\r\n                    '<tr>\\\r\n                        <td class=\"{0}\">\\\r\n                            <div class=\"{1} {2}\" {3}=\"{5}\"></div>\\\r\n                        </td>\\\r\n                        <td class=\"{4}\">\\\r\n                            <div class=\"{1}\">{6}</div>\\\r\n                        </td>\\\r\n                    </tr>',\r\n                [\r\n                    NUMBERS_BLOCK_NAME,\r\n                    LINE_NAME,\r\n                    NUMBER_LINE_NAME,\r\n                    DATA_ATTR_NAME,\r\n                    CODE_BLOCK_NAME,\r\n                    i + 1,\r\n                    lines[i].length > 0 ? lines[i] : ' '\r\n                ]);\r\n            }\r\n\r\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\r\n        }\r\n\r\n        return inputHtml;\r\n    }\r\n\r\n    /**\r\n     * Recursive method for fix multi-line elements implementation in highlight.js\r\n     * Doing deep passage on child nodes.\r\n     * @param {HTMLElement} element\r\n     */\r\n    function duplicateMultilineNodes (element) {\r\n        var nodes = element.childNodes;\r\n        for (var node in nodes) {\r\n            if (nodes.hasOwnProperty(node)) {\r\n                var child = nodes[node];\r\n                if (getLinesCount(child.textContent) > 0) {\r\n                    if (child.childNodes.length > 0) {\r\n                        duplicateMultilineNodes(child);\r\n                    } else {\r\n                        duplicateMultilineNode(child.parentNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method for fix multi-line elements implementation in highlight.js\r\n     * @param {HTMLElement} element\r\n     */\r\n    function duplicateMultilineNode (element) {\r\n        var className = element.className;\r\n\r\n        if ( ! /hljs-/.test(className)) return;\r\n\r\n        var lines = getLines(element.innerHTML);\r\n\r\n        for (var i = 0, result = ''; i < lines.length; i++) {\r\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className, lines[i] ]);\r\n        }\r\n\r\n        element.innerHTML = result.trim();\r\n    }\r\n\r\n    function getLines (text) {\r\n        if (text.length === 0) return [];\r\n        return text.split(BREAK_LINE_REGEXP);\r\n    }\r\n\r\n    function getLinesCount (text) {\r\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\r\n    }\r\n\r\n    function async (func) {\r\n        w.setTimeout(func, 0);\r\n    }\r\n\r\n    /**\r\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\r\n     * @param {string} format\r\n     * @param {array} args\r\n     */\r\n    function format (format, args) {\r\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\r\n            return args[n] ? args[n] : m;\r\n        });\r\n    }\r\n});"]}