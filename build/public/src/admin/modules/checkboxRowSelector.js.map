{"version":3,"sources":["public/src/admin/modules/checkboxRowSelector.js"],"names":["define","self","$tableContainer","toggling","init","tableCssSelector","$","on","handleChange","updateAll","find","each","idx","el","updateState","$checkboxEl","checkboxes","closest","toArray","$toggler","shift","rowState","length","every","checked","prop","ev","target","toggleAll","state","$checkbox","click"],"mappings":"AAAA,aAEAA,OAAO,oCAAqC,WAC3C,MAAMC,KACN,IAAIC,EAEJD,EAAKE,SAAW,MAEhBF,EAAKG,KAAO,SAAUC,GACrBH,EAAkBI,EAAED,GACpBH,EAAgBK,GAAG,SAAU,wBAAyBC,IAGvDP,EAAKQ,UAAY,WAChBP,EAAgBQ,KAAK,yBAAyBC,KAAK,CAACC,EAAKC,KACxDZ,EAAKa,YAAYR,EAAEO,OAIrBZ,EAAKa,YAAc,SAAUC,GAC5B,GAAId,EAAKE,SAAU,CAClB,OAED,MAAMa,EAAaD,EAAYE,QAAQ,MAAMP,KAAK,yBAAyBQ,UAC3E,MAAMC,EAAWb,EAAEU,EAAWI,SAC9B,MAAMC,EAAWL,EAAWM,QAAUN,EAAWO,MAAMV,GAAMA,EAAGW,SAChEL,EAASM,KAAK,UAAWJ,IAG1B,SAASb,EAAakB,GACrB,MAAMX,EAAcT,EAAEoB,EAAGC,QACzBC,EAAUb,GAGX,SAASa,EAAUb,GAClBd,EAAKE,SAAW,KAChB,MAAM0B,EAAQd,EAAYU,KAAK,WAC/BV,EAAYE,QAAQ,MAAMP,KAAK,+BAA+BC,KAAK,CAACC,EAAKC,KACxE,MAAMiB,EAAYxB,EAAEO,GACpB,GAAIiB,EAAUL,KAAK,aAAeI,EAAO,CACxC,OAEDC,EAAUC,UAEX9B,EAAKE,SAAW,MAGjB,OAAOF","file":"public/src/admin/modules/checkboxRowSelector.js","sourcesContent":["'use strict';\n\ndefine('admin/modules/checkboxRowSelector', function () {\n\tconst self = {};\n\tlet $tableContainer;\n\n\tself.toggling = false;\n\n\tself.init = function (tableCssSelector) {\n\t\t$tableContainer = $(tableCssSelector);\n\t\t$tableContainer.on('change', 'input.checkbox-helper', handleChange);\n\t};\n\n\tself.updateAll = function () {\n\t\t$tableContainer.find('input.checkbox-helper').each((idx, el) => {\n\t\t\tself.updateState($(el));\n\t\t});\n\t};\n\n\tself.updateState = function ($checkboxEl) {\n\t\tif (self.toggling) {\n\t\t\treturn;\n\t\t}\n\t\tconst checkboxes = $checkboxEl.closest('tr').find('input:not([disabled])').toArray();\n\t\tconst $toggler = $(checkboxes.shift());\n\t\tconst rowState = checkboxes.length && checkboxes.every(el => el.checked);\n\t\t$toggler.prop('checked', rowState);\n\t};\n\n\tfunction handleChange(ev) {\n\t\tconst $checkboxEl = $(ev.target);\n\t\ttoggleAll($checkboxEl);\n\t}\n\n\tfunction toggleAll($checkboxEl) {\n\t\tself.toggling = true;\n\t\tconst state = $checkboxEl.prop('checked');\n\t\t$checkboxEl.closest('tr').find('input:not(.checkbox-helper)').each((idx, el) => {\n\t\t\tconst $checkbox = $(el);\n\t\t\tif ($checkbox.prop('checked') === state) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$checkbox.click();\n\t\t});\n\t\tself.toggling = false;\n\t}\n\n\treturn self;\n});\n"]}